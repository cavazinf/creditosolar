// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

contract CreditosSolares {
    string public name = "CreditosSolarestfc";
    string public symbol = "SOLAR";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) private balanceOf;
    mapping(address => mapping(address => uint256)) private  allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(uint256 initialSupply) {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _value) private  returns (bool success) {
        require(_to != address(0), "Endereco invalido");
        require(balanceOf[msg.sender] >= _value, "Saldo insuficiente");

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) private  returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) private returns (bool success) {
        require(_from != address(0), "Endereco invalido");
        require(_to != address(0), "Endereco invalido");
        require(balanceOf[_from] >= _value, "Saldo insuficiente");
        require(_value <= allowance[_from][msg.sender], "Permissao insuficiente");

        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, _value);
        return true;
    }
}


https://sepolia.etherscan.io/address/0xcb93d1e7cdb7a2db4ae82e48ba1e3050c897fc54
